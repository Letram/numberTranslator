<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="birth" xml:space="preserve">
    <value>#Nacimientos</value>
  </data>
  <data name="birthDescripion" xml:space="preserve">
    <value>Nacido de un parto múltiple</value>
  </data>
  <data name="birthNumberDescription" xml:space="preserve">
    <value>#Nacimiento de un parto solo o con más hermanos. (French)</value>
  </data>
  <data name="cardinal" xml:space="preserve">
    <value>#Cardinal</value>
  </data>
  <data name="cardinalDescription" xml:space="preserve">
    <value>Los números cardinales expresan cantidad en relación con la serie de los números naturales.</value>
  </data>
  <data name="decimalDescription" xml:space="preserve">
    <value>Los números decimales expresan una cantidad en relación con la serie de los números naturales más una fracción de una unidad separada por una coma o un punto.</value>
  </data>
  <data name="decimalNumberDescription" xml:space="preserve">
    <value>#Número traducido a texto decimal.(French)</value>
  </data>
  <data name="decimalTitle" xml:space="preserve">
    <value>#Decimal</value>
  </data>
  <data name="error1" xml:space="preserve">
    <value>El exponente es demasiado grande, el máximo permitido es ~E120.</value>
  </data>
  <data name="error2" xml:space="preserve">
    <value>Número no soportado.</value>
  </data>
  <data name="error3" xml:space="preserve">
    <value>Número no escrito correctamente.</value>
  </data>
  <data name="error4" xml:space="preserve">
    <value>Número máximo soportado es mil vigintillones menos uno.</value>
  </data>
  <data name="fractional" xml:space="preserve">
    <value>#Fraccionario</value>
  </data>
  <data name="fractionalDescription" xml:space="preserve">
    <value>Los números fraccionarios expresan división de un todo en partes y designan las fracciones iguales en que se ha dividido la unidad.</value>
  </data>
  <data name="multiplicative" xml:space="preserve">
    <value>#Multiplicativo</value>
  </data>
  <data name="multiplicativeDescription" xml:space="preserve">
    <value>Los números multiplicativos expresan que el sustantivo al que se refieren se compone de tantas unidades o implica tantas repeticiones como el numeral indica.</value>
  </data>
  <data name="numberCardinalDescription" xml:space="preserve">
    <value>#Número traducido a texto cardinal. (French)</value>
  </data>
  <data name="numberFractionalDescription" xml:space="preserve">
    <value>#Número traducido a texto fraccionario o partitivo. (French)</value>
  </data>
  <data name="numberMultiplicativeDescription" xml:space="preserve">
    <value>#Número traducido a texto multiplicativo. (French)</value>
  </data>
  <data name="numberOrdinalDescription" xml:space="preserve">
    <value>#Número traducido a texto ordinal.(French)</value>
  </data>
  <data name="ordinal" xml:space="preserve">
    <value>#Ordinal</value>
  </data>
  <data name="ordinalDescription" xml:space="preserve">
    <value>Los números ordinales expresan orden o sucesión e indican el lugar que ocupa el elemento en una serie ordenada.</value>
  </data>
  <data name="other" xml:space="preserve">
    <value>&amp;&amp;Otras formas de decirlo:</value>
  </data>
  <data name="value" xml:space="preserve">
    <value>#Valor numérico</value>
  </data>
</root>